#include "minirt.h"

static t_bmp_header g_bmp_header = (t_bmp_header){
	 .bitmap_signature_bytes[0] = 'B',
	 .bitmap_signature_bytes[1] = 'M',
	 .size_of_bitmap_file = 0,
	 .reserved_bytes = 0,
	 .pixel_data_offset = BMP_TOTAL_HEADER_SIZE,
	 .size_of_info_header = BMP_INFO_HEADER_SIZE,
	 .width = 0,
	 .height = 0,
	 .number_of_color_planes = 1,
	 .color_depth = 32,
	 .compression_method = 0,
	 .raw_bitmap_data_size = 0,
	 .horizontal_resolution = 0,
	 .vertical_resolution = 0,
	 .color_table_entries = 0,
	 .important_colors = 0,
};

char	*get_bmp_data_from_image(char* data, size_t data_size)
{
	void	*ret;

	ret = malloc(data_size);
	if (!ret)
		die("Malloc failed");
	ft_strlcpy(ret, data, data_size);
	return (ret);

}

void	create_bmp()
{
	int				fd;
	struct s_image *image;
	size_t			data_size;
	char			header[BMP_HEADER_SIZE];
	char			*filename;
	void			*bmp_data;

	image = env.images;

	data_size = env.res_x * env.res_y * sizeof(int);

	g_bmp_header.size_of_bitmap_file = data_size + BMP_TOTAL_HEADER_SIZE;
	g_bmp_header.width = env.res_x;
	g_bmp_header.height = -env.res_y;

	fd = open("minirt_image.bmp", O_WRONLY | O_TRUNC | O_CREAT, 0777);
	if (fd < 0)
		die("Could not create bmp file\n");

	write(fd, header, BMP_TOTAL_HEADER_SIZE);

	bmp_data = get_bmp_data_from_image(image->data, data_size);

	write(fd, bmp_data, data_size);

	free(bmp_data);
	close(fd);
}
