!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
add_vec	vector_operation.c	/^t_vec3	add_vec(t_vec3 v1, t_vec3 v2)$/;"	f
apply_lighting	lighting.c	/^t_color		apply_lighting(t_color color, t_vec3 color_ratios)$/;"	f
apply_rotation_to_ray	matrices.c	/^t_vec3			apply_rotation_to_ray(t_vec3 ray, t_matrix3x3 rot_matrix)$/;"	f
arrange_format	libft/ft_printf/format_utils.c	/^void		arrange_format(struct s_parameters *format)$/;"	f
autodot	vector_products.c	/^double	autodot(t_vec3 v)$/;"	f
canvas_to_viewport	pixel_to_rays.c	/^t_vec3		canvas_to_viewport(int x, int y, double fov)$/;"	f
cap_vec	lighting.c	/^static void	cap_vec(t_vec3 *vec)$/;"	f	file:
char_repr	libft/ft_printf/repr.c	/^char		*char_repr(unsigned char c,$/;"	f
check_args	args.c	/^void		check_args(int argc, char *argv[])$/;"	f
check_rt_extension	args.c	/^void		check_rt_extension(char *filename)$/;"	f
cleanup_and_quit	main.c	/^int			cleanup_and_quit(void)$/;"	f
compute_cam_to_world_matrix	matrices.c	/^t_matrix3x3		compute_cam_to_world_matrix(t_vec3 camera_direction)$/;"	f
compute_cylinder_lighting	object_lighting.c	/^t_color	compute_cylinder_lighting(t_vec3 *ray, t_vec3 *eye,$/;"	f
compute_lighting	lighting.c	/^t_vec3		compute_lighting(t_vec3 hit_point, t_vec3 normal)$/;"	f
compute_plane_lighting	object_lighting.c	/^t_color	compute_plane_lighting(t_vec3 *ray, t_vec3 *eye, t_plane *plane,$/;"	f
compute_ray_color	colors.c	/^t_color	compute_ray_color(t_vec3 *ray, t_vec3 *eye,$/;"	f
compute_sphere_lighting	object_lighting.c	/^t_color	compute_sphere_lighting(t_vec3 *ray, t_vec3 *eye, t_sphere *sphere,$/;"	f
compute_square_lighting	object_lighting.c	/^t_color	compute_square_lighting(t_vec3 *ray, t_vec3 *eye, t_square *square,$/;"	f
compute_triangle_lighting	object_lighting.c	/^t_color	compute_triangle_lighting(t_vec3 *ray, t_vec3 *eye,$/;"	f
create_bmp	bitmap.c	/^void	create_bmp(void)$/;"	f
create_filename	bitmap.c	/^static char	*create_filename(int file_number)$/;"	f	file:
create_images	images.c	/^void	create_images(void)$/;"	f
cross_product	vector_products.c	/^t_vec3	cross_product(t_vec3 a, struct s_vec3 b)$/;"	f
die	error.c	/^void	die(const char *error_text)$/;"	f
diralloc	libft/ft_split.c	/^static char			**diralloc(const char *s, char c)$/;"	f	file:
display_scene	main.c	/^static void	display_scene(void)$/;"	f	file:
distribute_colors	colors.c	/^t_vec3	distribute_colors(t_color color)$/;"	f
dot	vector_products.c	/^double	dot(t_vec3 u, t_vec3 v)$/;"	f
env_checkup	main.c	/^static void	env_checkup(void)$/;"	f	file:
free_camera_list	cleanup.c	/^void	free_camera_list(t_cam *camera)$/;"	f
free_env	cleanup.c	/^void	free_env(t_env *env)$/;"	f
free_image_list	cleanup.c	/^void	free_image_list(struct s_image *image)$/;"	f
free_light_list	cleanup.c	/^void	free_light_list(void)$/;"	f
free_object_list	cleanup.c	/^void	free_object_list(t_object *object)$/;"	f
ft_10powerof	libft/ft_itoa.c	/^static long	ft_10powerof(long n)$/;"	f	file:
ft_10powerof	libft/ft_putnbr_fd.c	/^static long	ft_10powerof(long n)$/;"	f	file:
ft_atoi	libft/ft_atoi.c	/^int			ft_atoi(const char *nptr)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_dprintf	libft/ft_printf/ft_dprintf.c	/^int	ft_dprintf(int fd, const char *formatted_string, ...)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	libft/ft_isspace.c	/^int	ft_isspace(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_lutoa_base	libft/ft_printf/ft_lutoa_base.c	/^char					*ft_lutoa_base(unsigned long n, const char *base_str)$/;"	f
ft_lutoa_format	libft/ft_printf/repr.c	/^static char	*ft_lutoa_format(long nbr, int type)$/;"	f	file:
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_printf	libft/ft_printf/ft_printf.c	/^int	ft_printf(const char *formatted_string, ...)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void		ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	libft/ft_split.c	/^char				**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_and_free	libft/ft_strjoin_and_free.c	/^char	*ft_strjoin_and_free(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *l, const char *r, size_t n)$/;"	f
ft_strndup	libft/ft_strndup.c	/^char	*ft_strndup(const char *s, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char		*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char		*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_vdprintf	libft/ft_printf/ft_vdprintf.c	/^int						ft_vdprintf(int fd, const char *fs, va_list args)$/;"	f
g_bmp_header	bitmap.c	/^static t_bmp_header g_bmp_header = (t_bmp_header){$/;"	v	file:
g_env	main.c	/^t_env	g_env;$/;"	v
get_color_as_int	colors.c	/^int		get_color_as_int(t_color color)$/;"	f
get_next_line	libft/get_next_line.c	/^int			get_next_line(int fd, char **line)$/;"	f
get_quad_coef	intersect_cylinder.c	/^static t_vec3		get_quad_coef(t_vec3 dir, t_vec3 oc, double radius)$/;"	f	file:
get_quad_roots	intersect_cylinder.c	/^bool		get_quad_roots(double *root1, double *root2, t_vec3 quad_coef)$/;"	f
grow_buffer_until_newline	libft/get_next_line.c	/^static int	grow_buffer_until_newline(int fd, char **buffer,$/;"	f	file:
handle_keypress	keypress.c	/^int		handle_keypress(int keycode, void *params)$/;"	f
init_env	init.c	/^void		init_env(void)$/;"	f
init_format	libft/ft_printf/format_utils.c	/^void		init_format(struct s_parameters *format)$/;"	f
intersect_ray_with_cylinder	intersect_cylinder.c	/^bool			intersect_ray_with_cylinder(t_vec3 *eye, t_vec3 *ray, t_cylinder *cylinder, double *t, double tmin, double tmax)$/;"	f
intersect_ray_with_object	intersection_triage.c	/^bool		intersect_ray_with_object(t_vec3 *eye, t_vec3 *ray, t_object *object, double *solution, double tmin, double tmax)$/;"	f
intersect_ray_with_plane	intersect_plane.c	/^bool	intersect_ray_with_plane(t_vec3 *eye, t_vec3 *ray, t_plane *plane, double *t, double tmin, double tmax)$/;"	f
intersect_ray_with_sphere	intersect_sphere.c	/^bool	intersect_ray_with_sphere(t_vec3 *O, t_vec3 *ray, t_sphere *sphere, double *t,$/;"	f
intersect_ray_with_square	square.c	/^bool		intersect_ray_with_square(t_vec3 *eye, t_vec3 *ray,$/;"	f
intersect_ray_with_triangle	intersect_triangle.c	/^bool			intersect_ray_with_triangle(t_vec3 *eye, t_vec3 *ray, t_triangle *triangle, double *t, double tmin, double tmax)$/;"	f
is_in	libft/ft_printf/format_utils.c	/^int			is_in(char c, const char *charset)$/;"	f
is_in	parse_values.c	/^static int		is_in(char c, const char *set)$/;"	f	file:
is_in_set	libft/ft_strtrim.c	/^static int	is_in_set(char c, char const *set)$/;"	f	file:
is_in_the_box	intersect_triangle.c	/^static bool		is_in_the_box(t_vec3 hit_point, t_triangle *tr)$/;"	f	file:
is_inside_cyl	intersect_cylinder.c	/^static bool		is_inside_cyl(t_vec3 *eye, t_cylinder *cylinder, t_vec3 *ray, double t)$/;"	f	file:
is_inside_square	square.c	/^static bool	is_inside_square(t_vec3 hit_point, t_square *square)$/;"	f	file:
is_inside_triangle	intersect_triangle.c	/^static bool		is_inside_triangle(t_vec3 hit_point, t_triangle *tr)$/;"	f	file:
leftpad	libft/ft_printf/pad.c	/^void	leftpad(char **str, char c, size_t n)$/;"	f
main	main.c	/^int			main(int argc, char *argv[])$/;"	f
max	intersect_triangle.c	/^static double	max(double a, double b, double c)$/;"	f	file:
min	intersect_triangle.c	/^static double	min(double a, double b, double c)$/;"	f	file:
nbr_repr	libft/ft_printf/repr.c	/^char		*nbr_repr(long nbr, struct s_parameters *format, ssize_t *size)$/;"	f
next_sep	libft/ft_split.c	/^static const char	*next_sep(const char *str, char sep)$/;"	f	file:
next_word	libft/ft_split.c	/^static const char	*next_word(const char *str, char sep)$/;"	f	file:
normalize	vector_operation.c	/^t_vec3	normalize(t_vec3 v)$/;"	f
parse_ambl	parse_light.c	/^void	parse_ambl(char **input)$/;"	f
parse_cam	parse.c	/^void			parse_cam(char **input)$/;"	f
parse_color	parse_values.c	/^t_color	parse_color(char **input)$/;"	f
parse_cy	parse_objects.c	/^void	parse_cy(char **input)$/;"	f
parse_double	parse_values.c	/^double	parse_double(char **input)$/;"	f
parse_double_or_die	parse_values.c	/^double		parse_double_or_die(char **input)$/;"	f
parse_file_into_env	parse.c	/^void			parse_file_into_env(void)$/;"	f
parse_int	parse_values.c	/^int		parse_int(char **input)$/;"	f
parse_int_or_die	parse_values.c	/^int	parse_int_or_die(char **input)$/;"	f
parse_light	parse_light.c	/^void	parse_light(char **input)$/;"	f
parse_pl	parse_objects.c	/^void	parse_pl(char **input)$/;"	f
parse_res	parse.c	/^void			parse_res(char **input)$/;"	f
parse_sp	parse_objects.c	/^void	parse_sp(char **input)$/;"	f
parse_sq	parse_objects.c	/^void	parse_sq(char **input)$/;"	f
parse_str_into_format	libft/ft_printf/format_utils.c	/^void		*parse_str_into_format(const char *fs,$/;"	f
parse_tokens	parse.c	/^static void		parse_tokens(char **input)$/;"	f	file:
parse_tr	parse_objects.c	/^void	parse_tr(char **input)$/;"	f
parse_vec	parse_values.c	/^t_vec3	parse_vec(char **input)$/;"	f
pre_compute_coef	intersect_cylinder.c	/^static t_vec3	pre_compute_coef(t_vec3 v1, t_vec3 v2)$/;"	f	file:
ptr_repr	libft/ft_printf/repr.c	/^char		*ptr_repr(void *ptr, struct s_parameters *format, ssize_t *size)$/;"	f
put_pixel_to_image	images.c	/^void	put_pixel_to_image(struct s_image *image, int x, int y, int color)$/;"	f
render	render.c	/^static void	render(struct s_image image, double fov)$/;"	f	file:
render_image_list	render.c	/^void		render_image_list(struct s_image *images)$/;"	f
rightpad	libft/ft_printf/pad.c	/^void	rightpad(char **str, char c, size_t n)$/;"	f
scale_by	vector_operation.c	/^t_vec3	scale_by(t_vec3 vector, double scalar)$/;"	f
skip_blank	parse_values.c	/^void	skip_blank(char **input)$/;"	f
skip_blank_and_one_comma	parse_values.c	/^void	skip_blank_and_one_comma(char **input)$/;"	f
skip_set	parse_values.c	/^void	skip_set(char **input, const char *set)$/;"	f
solve_cylinder	intersect_cylinder.c	/^static bool		solve_cylinder(t_vec3 *eye, t_cylinder *cylinder, t_vec3 *ray, t_vec3 quad_coef, double *t,$/;"	f	file:
sq	main.c	/^double		sq(double value)$/;"	f
str_repr	libft/ft_printf/repr.c	/^char		*str_repr(char *s, struct s_parameters *format, ssize_t *size)$/;"	f
sub_vec	vector_operation.c	/^t_vec3		sub_vec(t_vec3 point1, t_vec3 point2)$/;"	f
to_radians	parse.c	/^static double	to_radians(double angle)$/;"	f	file:
to_the_power_of	libft/ft_printf/ft_lutoa_base.c	/^static unsigned long	to_the_power_of(unsigned long n, unsigned long p)$/;"	f	file:
token_table	parse.c	/^static struct s_fat_token token_table[] =$/;"	v	typeref:struct:s_fat_token	file:
trace_light	trace.c	/^bool	trace_light(t_vec3 *hit_point, t_vec3 *ray)$/;"	f
trace_ray	trace.c	/^t_color	trace_ray(t_vec3 *eye, t_vec3 *ray)$/;"	f
transpose_matrix	matrices.c	/^t_matrix3x3		transpose_matrix(t_matrix3x3 matrix)$/;"	f
vec_len	vector_operation.c	/^double	vec_len(t_vec3 v)$/;"	f
write_bmp_data	bitmap.c	/^static void	write_bmp_data(int fd, int *data)$/;"	f	file:
write_format	libft/ft_printf/format_utils.c	/^ssize_t		write_format(int fd,$/;"	f
